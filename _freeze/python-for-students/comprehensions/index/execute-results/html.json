{
  "hash": "9a3951c73170dbbc61a4b1409f3fdfdb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Comprehensions\nsubtitle: using comprehensions to create lists, tuples, sets, and dictionaries\njupyter: python3\norder: 7\nformat:\n  html:\n    code-fold: false\n---\n\n\n\nWe have already seen what lists, tuples, sets and dictionaries are. We have also seen how to create them. We also saw a few examples of comprehensions when looking at functions. Comprehensions however are such an important part of Python that they deserve a separate discussion.\n\n## Why are comprehensions important?\n\nCreating lists, tuples, sets and dictionaries is a common task in Python, especially in data science and other data intensive applications. Comprehensions provide a concise way to create these data structures. They are also faster than using loops to create them.\n\nFinally, comprehensions promote a *functional* programming style. This is a style of programming that is based on mathematical thinking. It is a style that is becoming more popular in Python and other languages since it tends to clearer, more concise, and less error-prone code. By focusing on expressions that transform data rather than on sequences of commands, functional programming encourages immutability, stateless functions, and declarative code. This approach makes programs easier to reason about, test, and maintainâ€”qualities that are highly valued in modern software development. Comprehensions embody these principles by allowing developers to succinctly express complex transformations in a readable, mathematical-like way.\n\n## The basics of comprehensions\n\nThe basic syntax for a comprehension is `expression for item in iterable`. The `expression` is the value that will be stored in the data structure, the `item` is the variable that will be assigned the value of the current element in the `iterable`. The `iterable` is the object that will be iterated over. Optionally, you can add a condition to the comprehension. The condition is a boolean expression that will be evaluated for each element in the `iterable`. If the condition is `True`, the element will be included in the data structure, if it is `False`, the element will be excluded.\n\n![Comprehension syntax](figures/comprehension.svg)\n\n:::{.callout-note}\n## About Iterables\n\nThe iterable can be a list, tuple, set, dictionary, or any other object that can be iterated over. Think of it as a sequence of values that can be accessed one at a time. Iterables are objects that implement the `__iter__` method. This method returns an iterator object that can be used to iterate over the elements of the iterable. The iterator object implements the `__next__` method which returns the next element in the sequence. When there are no more elements to return, the `__next__` method raises a `StopIteration` exception. You can create iterable method yourself, but most of the time you will use built-in iterables like lists, tuples, sets, dictionaries, and strings.\n:::\n\nLet us look at the simplest possible example. In this case we will use the `range` function to create an *iterable* from 0 to 9 (i.e., an object which can be iterated). We will then use a comprehension to create a list from the items returned by the *iterable*. This is the simplest way to create a list, tuple, set or dictionary using a comprehension.\n\n::: {#c6385975 .cell execution_count=2}\n``` {.python .cell-code}\n[x for x in range(10)]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\nWe could equally create a tuple, as follows:\n\n::: {#bbfde43f .cell execution_count=3}\n``` {.python .cell-code}\ntuple(x for x in range(10))\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n```\n:::\n:::\n\n\nOr a set:\n\n::: {#bff55f57 .cell execution_count=4}\n``` {.python .cell-code}\nset(x for x in range(10))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n:::\n:::\n\n\nOr a dictionary:\n\n::: {#f9fe930b .cell execution_count=5}\n``` {.python .cell-code}\n{x for x in range(10)}\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n:::\n:::\n\n\nComprehensions rely on an object that can be iterated over. This is why we used the `range` function in the examples above. However, we can use any object that can be iterated over. For example, we could use a list:\n\n::: {#e4f3afdc .cell execution_count=6}\n``` {.python .cell-code}\nnumbers = [1, 2, 3, 4, 5]\n# The following is equivalent to just the numbers list itself\n[x for x in numbers]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[1, 2, 3, 4, 5]\n```\n:::\n:::\n\n\n## Generators\n\nComprehensions return a new object of the `generator` type. This is a special type of object that can be iterated over. It is similar to a list, but it is more memory efficient. You can convert a generator to a list, set, tuple or dictionary by using the `list`, `set`, `tuple` and `dictionary` functions. For example:\n\n::: {#2808fab8 .cell execution_count=7}\n``` {.python .cell-code}\ngenerator = (x for x in range(10))\nprint(generator)\n\nnumbers = list(generator)\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<generator object <genexpr> at 0x105dc6810>\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\nYou can also iterate through a generator yourself using a `for` loop.\n\n```{admonition} About Generators\n:class: warning, dropdown\nYou can only iterate through a generator once. If you want to iterate through it again, you will need to create a new generator.\n```\n\n::: {#9780984e .cell execution_count=8}\n``` {.python .cell-code}\ngenerator = (x for x in range(10))\n\nfor number in generator:\n    print(number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\nAdditionaly, any function that takes an iterable as an argument can take a generator as an argument. For example, we can use the `sum` function to sum the elements of a generator.\n\n::: {#94689f68 .cell execution_count=9}\n``` {.python .cell-code}\ngenerator = (x for x in range(10))\n\nprint(sum(generator))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n45\n```\n:::\n:::\n\n\nGenerators compute values on the fly, and only when they are necessary. This is useful for when you have large or even infinite sequences. For example, you could create a generator that generates the Fibonacci sequence.\n\n::: {#f2b192fb .cell execution_count=10}\n``` {.python .cell-code}\n# Use a generator to calculate the fibonacci sequence\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        # Compute the next Fibonacci number using a temporary variable\n        next_value = a + b\n        a = b        # Shift 'a' to the next number\n        b = next_value  # Assign the sum as the new 'b'\n        \nfib = fibonacci()\nprint(fib) # Notice that fib is a generator object\n\n# Print the first 10 numbers in the fibonacci sequence\nfor i in range(10):\n    print(next(fib))\n\n# The generator will \"remember\" where it left off and you can continue calling next on it\nprint(\"...\")\nprint(next(fib))\nprint(next(fib))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<generator object fibonacci at 0x13819c790>\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n...\n55\n89\n```\n:::\n:::\n\n\nNow you might be thinking, how does Python know the `fibonacci` function is a generator? The answer is that Python uses the `yield` keyword to create a generator. The `yield` keyword is similar to the `return` keyword, but it does not stop the function. Instead, it pauses the function and returns the value. When the function is called again, it resumes from where it left off. This is why we can use the `fibonacci` function as a generator.\n\n## Filtering\n\nYou can also filter the elements of an iterable using a comprehension. To do this, you add an `if` statement to the comprehension. The `if` statement is used to filter the elements of the iterable. For example, we could create a list of even numbers from 0 to 9.\n\n::: {#a834c7d0 .cell execution_count=11}\n``` {.python .cell-code}\n[x for x in range(10) if x % 2 == 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\n## Nested comprehensions\n\nYou can nest comprehensions inside each other. This is useful when you have a list of lists, a list of tuples, a list of sets, a list of dictionaries, or any other nested data structure. For example, we could create a multiplication table using a nested comprehension.\n\n:::{.callout-note}\n## About Nested Comprehensions\n\nNested comprehensions are read from left to right. This means that the outer comprehension is read first, then the inner comprehension. This is important to remember when you are creating nested comprehensions. This can be confusing at first, but with practice you will get used to it. If you are having trouble understanding a nested comprehension, just take your time and relax! It will come to you eventually.\n:::\n\n::: {#7c1e8141 .cell execution_count=12}\n``` {.python .cell-code}\nmultiplication_table = [\n    [x * y for y in range(1, 10)] for x in range(1, 10)\n]\n# Print the multiplication table in a more readable format\nfor row in multiplication_table:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[2, 4, 6, 8, 10, 12, 14, 16, 18]\n[3, 6, 9, 12, 15, 18, 21, 24, 27]\n[4, 8, 12, 16, 20, 24, 28, 32, 36]\n[5, 10, 15, 20, 25, 30, 35, 40, 45]\n[6, 12, 18, 24, 30, 36, 42, 48, 54]\n[7, 14, 21, 28, 35, 42, 49, 56, 63]\n[8, 16, 24, 32, 40, 48, 56, 64, 72]\n[9, 18, 27, 36, 45, 54, 63, 72, 81]\n```\n:::\n:::\n\n\n## Exercises\n\n1. Create a list of the squares of the numbers from 0 to 9 using a comprehension.\n2. Change the comprehension above to create a list of the squares of only even numbers.\n3. Create a generator which produces an infinite sequence of factorials.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}