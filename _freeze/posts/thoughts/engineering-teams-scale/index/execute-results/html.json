{
  "hash": "ff73d6bd9b30b8e89daa337d66fc7036",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Getting Things Right: How Engineering Teams Scale and Achieve Great Things\"\ndescription: larger doesn't always mean faster or better\ndate: 2025-03-04\ntags:\n  - Thoughts\n  - Software Engineering\n  - Scaling\ncategories:\n  - Thoughts\n  - Software Engineering\n  - Scaling\nabout:\n  template: marquee\n  image: Claudio-Ranieri.jpg\n---\n\n\nI have spent a significant portion of my career trying to understand how engineering teams work together and scale, and working out ways to assist them in becoming more effective. If you have been in the same position, you probably know that it is a job which is never truly finished, and which often leads to no gratifying conclusion or a \"thank you\" at the end.\n\nWorking with people is hard, understanding personalities, how different people collaborate, and how to help them work better together is fiendishly difficult.\n\nDespite all this, there is often a push to grow out of difficulties when something isn't quite working or objectives are not met, by adding more people to the mix. The underlying assumption is that more bodies will get the job done faster, and as importantly, that people are *fungible* and can just be moved around and hit the ground running.\n\nThis couldn't be further from the truth, and it often leads to disaster. Non-performing teams are so for a number of reasons, and it is uncommon for *size* to be the main one.\n\n## Why teams underperform\n\nIn the 2015-2016 Premier League season, Leicester City won the title with a team that cost less than a single player from Manchester City. It had been promoted to the Premier League just two years before, and was expected to be relegated. [The team was made up of players who had been discarded by other clubs](https://www.premierleague.com/news/2748139), and who had never played at the highest level. Yet, they won the title.\n\nIt was a shock to everyone, and probably the greatest underdog story in the history of football. It was also a testament to the fact that teams are not just about the sum of their parts, but about how those parts work together. In software engineering, the same is true. Often underperformance arises because of ways of working rather than individuals, and often, not because a team is short on staff.\n\nThere are many factors that can lead to poor performance - experience, motivation, communication, technical debt, technical or organisational complexity, and many others. An experienced team lead or engineering manager will be able to identify these factors and work to improve them, *but* only if they are given the time and resources to do so as part of their role. Trying to fix a team in motion during a tight deadline or complex project is like trying to fix a car while it is running.\n\n\n```{mermaid}\nflowchart LR\n    A[Poor Software Engineering Team Performance]\n    \n    subgraph Tech[Technical Issues]\n      B1[High Technical Debt]\n      B2[Outdated Technologies]\n    end\n\n    subgraph Proc[Process Issues]\n      C1[Inefficient Processes]\n      C2[Unclear Requirements]\n      C3[Poor Project Management]\n    end\n\n    subgraph People[People Issues]\n      D1[Poor Communication]\n      D2[Lack of Team Integration]\n      D3[Inadequate Skills/Training]\n      D4[Low Morale]\n    end\n\n    A --> Tech\n    A --> Proc\n    A --> People\n\n    class Tech tech;\n    class Proc process;\n    class People people;\n\n    classDef tech fill:#ffcccc,stroke:#cc0000,stroke-width:2px;\n    classDef process fill:#ccffcc,stroke:#00cc00,stroke-width:2px;\n    classDef people fill:#ccccff,stroke:#0000cc,stroke-width:2px;\n```\n\n\nIn modern engineering practices, and especially in software architectures with lots of moving parts and dependencies, it is very easy to introduce friction between project members, or between teams. For example, if one team adopts modern CI/CD, but another is still using traditional testing, friction between the two will increase and it will be hard to get effective cooperation. Equally, if a team decides to adopt an approach (say, an [:link event driven architecture](https://en.wikipedia.org/wiki/Event-driven_architecture)), but very few members have the necessary skills or experience, friction will happen between more and less skilled or experienced individuals, leading to inefficiencies and possibly burnout.\n\nFriction leads to the need of *more communication*, which in turn leads to more potential misunderstandings, and more time spent on clarifications. This is a vicious cycle that can only be broken by reducing points of contact and conflict, not by adding more people to the mix. This is where good team leads and engineering managers come in - they need to identify these sources of difficulty and misalignment, and work to reduce them or minimise their impact.\n\n## Meetings\n\nA sure fire way to identify a team that is not working well is to look at the number of meetings they have. Lots of scheduled, regular meetings with little or no agreed agenda or with no clear outcome, are a sign that the team is not managing to communicate effectively, and there is some form of compensation happening. Equally, if a team is getting together regularly, but the same small group of people are doing all the talking, is probably a good indicator that something isn't working quite well or there is a problem with lack of experience.\n\nSoftware engineering requires deep thought, concentration, and a lot of time ideating and trying different things out. This can be done effectively with one to one's or in very small, cohesive groups, but hardly by more than two or three people at a time. The more a meeting's attendance grows, the less effective it will be, and the potential for wasted time.\n\nIdeally, a meeting should last an amount of time that is inversely proportional to the number of attendees and frequency. The more people will attend, the less time it should last, and the less frequent it should occur. If a regular meeting is held every day for an hour, one should probably question *why* it is needed, and what the desired *outcome* is.\n\nA good rule of thumb is that a meeting should have a duration of $4/n$, where $n$ is the number of participants. Anything beyond that is probably a waste of time.\n\n::: {#16e5b001 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nfrom bokeh.plotting import figure, output_file, save, show, output_notebook\nfrom bokeh.models import ColumnDataSource\n\noutput_notebook(hide_banner=True)\n\n# Define the range of participants (n)\nn_values = np.linspace(2, 10, 10)\nd_values = 4 / n_values\n\n# Set up the Bokeh data source\nsource = ColumnDataSource(data=dict(n=n_values, d=d_values))\n\n# Create the Bokeh figure\np = figure(title=\"Meeting Duration vs. Number of Participants\",\n           x_axis_label=\"Number of Participants (n)\",\n           y_axis_label=\"Duration (hours)\",\n           width=600, height=400)\np.line('n', 'd', source=source, line_width=2, color=\"green\")\n\nshow(p)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script>'use strict';\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\nconst JS_MIME_TYPE = 'application/javascript';\n  const HTML_MIME_TYPE = 'text/html';\n  const EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n  const CLASS_NAME = 'output_bokeh rendered_html';\n\n  /**\n   * Render data to the DOM node\n   */\n  function render(props, node) {\n    const script = document.createElement(\"script\");\n    node.appendChild(script);\n  }\n\n  /**\n   * Handle when an output is cleared or removed\n   */\n  function handleClearOutput(event, handle) {\n    function drop(id) {\n      const view = Bokeh.index.get_by_id(id)\n      if (view != null) {\n        view.model.document.clear()\n        Bokeh.index.delete(view)\n      }\n    }\n\n    const cell = handle.cell;\n\n    const id = cell.output_area._bokeh_element_id;\n    const server_id = cell.output_area._bokeh_server_id;\n\n    // Clean up Bokeh references\n    if (id != null) {\n      drop(id)\n    }\n\n    if (server_id !== undefined) {\n      // Clean up Bokeh references\n      const cmd_clean = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n      cell.notebook.kernel.execute(cmd_clean, {\n        iopub: {\n          output: function(msg) {\n            const id = msg.content.text.trim()\n            drop(id)\n          }\n        }\n      });\n      // Destroy server and session\n      const cmd_destroy = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n      cell.notebook.kernel.execute(cmd_destroy);\n    }\n  }\n\n  /**\n   * Handle when a new output is added\n   */\n  function handleAddOutput(event, handle) {\n    const output_area = handle.output_area;\n    const output = handle.output;\n\n    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n    if ((output.output_type != \"display_data\") || (!Object.prototype.hasOwnProperty.call(output.data, EXEC_MIME_TYPE))) {\n      return\n    }\n\n    const toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n\n    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n      // store reference to embed id on output_area\n      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n    }\n    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n      const bk_div = document.createElement(\"div\");\n      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n      const script_attrs = bk_div.children[0].attributes;\n      for (let i = 0; i < script_attrs.length; i++) {\n        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n      }\n      // store reference to server id on output_area\n      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n    }\n  }\n\n  function register_renderer(events, OutputArea) {\n\n    function append_mime(data, metadata, element) {\n      // create a DOM node to render to\n      const toinsert = this.create_output_subarea(\n        metadata,\n        CLASS_NAME,\n        EXEC_MIME_TYPE\n      );\n      this.keyboard_manager.register_events(toinsert);\n      // Render to node\n      const props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n      render(props, toinsert[toinsert.length - 1]);\n      element.append(toinsert);\n      return toinsert\n    }\n\n    /* Handle when an output is cleared or removed */\n    events.on('clear_output.CodeCell', handleClearOutput);\n    events.on('delete.Cell', handleClearOutput);\n\n    /* Handle when a new output is added */\n    events.on('output_added.OutputArea', handleAddOutput);\n\n    /**\n     * Register the mime type and append_mime function with output_area\n     */\n    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n      /* Is output safe? */\n      safe: true,\n      /* Index of renderer in `output_area.display_order` */\n      index: 0\n    });\n  }\n\n  // register the mime type if in Jupyter Notebook environment and previously unregistered\n  if (root.Jupyter !== undefined) {\n    const events = require('base/js/events');\n    const OutputArea = require('notebook/js/outputarea').OutputArea;\n\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  }\n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  const NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded(error = null) {\n    const el = document.getElementById(null);\n    if (el != null) {\n      const html = (() => {\n        if (typeof root.Bokeh === \"undefined\") {\n          if (error == null) {\n            return \"BokehJS is loading ...\";\n          } else {\n            return \"BokehJS failed to load.\";\n          }\n        } else {\n          const prefix = `BokehJS ${root.Bokeh.version}`;\n          if (error == null) {\n            return `${prefix} successfully loaded.`;\n          } else {\n            return `${prefix} <b>encountered errors</b> while loading and may not function as expected.`;\n          }\n        }\n      })();\n      el.innerHTML = html;\n\n      if (error != null) {\n        const wrapper = document.createElement(\"div\");\n        wrapper.style.overflow = \"auto\";\n        wrapper.style.height = \"5em\";\n        wrapper.style.resize = \"vertical\";\n        const content = document.createElement(\"div\");\n        content.style.fontFamily = \"monospace\";\n        content.style.whiteSpace = \"pre-wrap\";\n        content.style.backgroundColor = \"rgb(255, 221, 221)\";\n        content.textContent = error.stack ?? error.toString();\n        wrapper.append(content);\n        el.append(wrapper);\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(() => display_loaded(error), 100);\n    }\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error(url) {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  const js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-3.6.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.6.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.6.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.6.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-mathjax-3.6.3.min.js\"];\n  const css_urls = [];\n\n  const inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {\n    }\n  ];\n\n  function run_inline_js() {\n    if (root.Bokeh !== undefined || force === true) {\n      try {\n            for (let i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n\n      } catch (error) {throw error;\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      const cell = $(document.getElementById(null)).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));</script>\n  <div id=\"d6430370-2b51-49ce-ab8b-fbf96fd11ac9\" data-root-id=\"p1004\" style=\"display: contents;\"></div>\n<script>(function(root) {\n  function embed_document(root) {\n  const docs_json = {\"f4f89b92-c5e9-4384-a521-26b4284eb97e\":{\"version\":\"3.6.3\",\"title\":\"Bokeh Application\",\"roots\":[{\"type\":\"object\",\"name\":\"Figure\",\"id\":\"p1004\",\"attributes\":{\"height\":400,\"x_range\":{\"type\":\"object\",\"name\":\"DataRange1d\",\"id\":\"p1005\"},\"y_range\":{\"type\":\"object\",\"name\":\"DataRange1d\",\"id\":\"p1006\"},\"x_scale\":{\"type\":\"object\",\"name\":\"LinearScale\",\"id\":\"p1014\"},\"y_scale\":{\"type\":\"object\",\"name\":\"LinearScale\",\"id\":\"p1015\"},\"title\":{\"type\":\"object\",\"name\":\"Title\",\"id\":\"p1007\",\"attributes\":{\"text\":\"Meeting Duration vs. Number of Participants\"}},\"renderers\":[{\"type\":\"object\",\"name\":\"GlyphRenderer\",\"id\":\"p1045\",\"attributes\":{\"data_source\":{\"type\":\"object\",\"name\":\"ColumnDataSource\",\"id\":\"p1001\",\"attributes\":{\"selected\":{\"type\":\"object\",\"name\":\"Selection\",\"id\":\"p1002\",\"attributes\":{\"indices\":[],\"line_indices\":[]}},\"selection_policy\":{\"type\":\"object\",\"name\":\"UnionRenderers\",\"id\":\"p1003\"},\"data\":{\"type\":\"map\",\"entries\":[[\"n\",{\"type\":\"ndarray\",\"array\":{\"type\":\"bytes\",\"data\":\"AAAAAAAAAEDHcRzHcRwHQI7jOI7jOA5AqqqqqqqqEkCO4ziO4zgWQHIcx3EcxxlAVVVVVVVVHUAcx3Ecx3EgQI7jOI7jOCJAAAAAAAAAJEA=\"},\"shape\":[10],\"dtype\":\"float64\",\"order\":\"little\"}],[\"d\",{\"type\":\"ndarray\",\"array\":{\"type\":\"bytes\",\"data\":\"AAAAAAAAAEB2Yid2Yif2P/Hw8PDw8PA/3LZt27Zt6z8K16NwPQrnPwnLPY2w3OM/ddFFF1104T8q8lk3mCLfPxmcj8H5GNw/mpmZmZmZ2T8=\"},\"shape\":[10],\"dtype\":\"float64\",\"order\":\"little\"}]]}}},\"view\":{\"type\":\"object\",\"name\":\"CDSView\",\"id\":\"p1046\",\"attributes\":{\"filter\":{\"type\":\"object\",\"name\":\"AllIndices\",\"id\":\"p1047\"}}},\"glyph\":{\"type\":\"object\",\"name\":\"Line\",\"id\":\"p1042\",\"attributes\":{\"x\":{\"type\":\"field\",\"field\":\"n\"},\"y\":{\"type\":\"field\",\"field\":\"d\"},\"line_color\":\"green\",\"line_width\":2}},\"nonselection_glyph\":{\"type\":\"object\",\"name\":\"Line\",\"id\":\"p1043\",\"attributes\":{\"x\":{\"type\":\"field\",\"field\":\"n\"},\"y\":{\"type\":\"field\",\"field\":\"d\"},\"line_color\":\"green\",\"line_alpha\":0.1,\"line_width\":2}},\"muted_glyph\":{\"type\":\"object\",\"name\":\"Line\",\"id\":\"p1044\",\"attributes\":{\"x\":{\"type\":\"field\",\"field\":\"n\"},\"y\":{\"type\":\"field\",\"field\":\"d\"},\"line_color\":\"green\",\"line_alpha\":0.2,\"line_width\":2}}}}],\"toolbar\":{\"type\":\"object\",\"name\":\"Toolbar\",\"id\":\"p1013\",\"attributes\":{\"tools\":[{\"type\":\"object\",\"name\":\"PanTool\",\"id\":\"p1026\"},{\"type\":\"object\",\"name\":\"WheelZoomTool\",\"id\":\"p1027\",\"attributes\":{\"renderers\":\"auto\"}},{\"type\":\"object\",\"name\":\"BoxZoomTool\",\"id\":\"p1028\",\"attributes\":{\"overlay\":{\"type\":\"object\",\"name\":\"BoxAnnotation\",\"id\":\"p1029\",\"attributes\":{\"syncable\":false,\"line_color\":\"black\",\"line_alpha\":1.0,\"line_width\":2,\"line_dash\":[4,4],\"fill_color\":\"lightgrey\",\"fill_alpha\":0.5,\"level\":\"overlay\",\"visible\":false,\"left\":{\"type\":\"number\",\"value\":\"nan\"},\"right\":{\"type\":\"number\",\"value\":\"nan\"},\"top\":{\"type\":\"number\",\"value\":\"nan\"},\"bottom\":{\"type\":\"number\",\"value\":\"nan\"},\"left_units\":\"canvas\",\"right_units\":\"canvas\",\"top_units\":\"canvas\",\"bottom_units\":\"canvas\",\"handles\":{\"type\":\"object\",\"name\":\"BoxInteractionHandles\",\"id\":\"p1035\",\"attributes\":{\"all\":{\"type\":\"object\",\"name\":\"AreaVisuals\",\"id\":\"p1034\",\"attributes\":{\"fill_color\":\"white\",\"hover_fill_color\":\"lightgray\"}}}}}}}},{\"type\":\"object\",\"name\":\"SaveTool\",\"id\":\"p1036\"},{\"type\":\"object\",\"name\":\"ResetTool\",\"id\":\"p1037\"},{\"type\":\"object\",\"name\":\"HelpTool\",\"id\":\"p1038\"}]}},\"left\":[{\"type\":\"object\",\"name\":\"LinearAxis\",\"id\":\"p1021\",\"attributes\":{\"ticker\":{\"type\":\"object\",\"name\":\"BasicTicker\",\"id\":\"p1022\",\"attributes\":{\"mantissas\":[1,2,5]}},\"formatter\":{\"type\":\"object\",\"name\":\"BasicTickFormatter\",\"id\":\"p1023\"},\"axis_label\":\"Duration (hours)\",\"major_label_policy\":{\"type\":\"object\",\"name\":\"AllLabels\",\"id\":\"p1024\"}}}],\"below\":[{\"type\":\"object\",\"name\":\"LinearAxis\",\"id\":\"p1016\",\"attributes\":{\"ticker\":{\"type\":\"object\",\"name\":\"BasicTicker\",\"id\":\"p1017\",\"attributes\":{\"mantissas\":[1,2,5]}},\"formatter\":{\"type\":\"object\",\"name\":\"BasicTickFormatter\",\"id\":\"p1018\"},\"axis_label\":\"Number of Participants (n)\",\"major_label_policy\":{\"type\":\"object\",\"name\":\"AllLabels\",\"id\":\"p1019\"}}}],\"center\":[{\"type\":\"object\",\"name\":\"Grid\",\"id\":\"p1020\",\"attributes\":{\"axis\":{\"id\":\"p1016\"}}},{\"type\":\"object\",\"name\":\"Grid\",\"id\":\"p1025\",\"attributes\":{\"dimension\":1,\"axis\":{\"id\":\"p1021\"}}}]}}]}};\n  const render_items = [{\"docid\":\"f4f89b92-c5e9-4384-a521-26b4284eb97e\",\"roots\":{\"p1004\":\"d6430370-2b51-49ce-ab8b-fbf96fd11ac9\"},\"root_ids\":[\"p1004\"]}];\n  void root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    let attempts = 0;\n    const timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window);</script>\n```\n:::\n:::\n\n\n## Heroics\n\nIn the software industry, there is a tendency to reward heroics and to find a [10x engineer\"](https://www.simplethread.com/the-10x-programmer-myth/) to solve all the problems and bring the team to the next level. Taking the previous football parallel, Leicester City did not have a single superstar player, but instead a cohesive group of players who worked together and who were motivated to win. Adding a very senior, highly productive engineer to a group which is not working well will most likely not solve the problem, it will just decrease the productivity of the new member.\n\nA chain is only as strong as its weakest link, and a team is only as strong as its weakest member. The goal should be to make the team work better together *as a group*, not to find a hero to save the day.\n\nThere is an exception to this, as bringing in a highly skilled engineer to mentor and coach the team can be very beneficial. This is not to solve the team's problems, but to help the team address them themselves. The mentor should be there to guide, not to do the gritty work entirely. However, this strategy can quickly backfire if the team *does not* accept a mentor to be brought in. Choosing and supporting the right person is key to success in this case, and it is crucial that people are willing to accept the help.\n\n## The *right* technology isn't necessarily the *best* technology\n\nIt is very easy, especially when the wrong incentives are in place, to pick a technology which is not right for the circumstances at hand. People want to work with the latest and greatest, and often the choice of technology is driven by what is desirable rather than what is right. It can lead to long learning curves, and the need for significant investment in time and resources to get everyone up to speed.\n\nEven when the willingness to invest is there, some teams will just not have the appetite to learn or follow new things - this happens way more often than one would assume. Especially when a given technical choice was not a voluntarily one. On the other hand, an eager team without accompanying experience can make choices that it can't deliver on. It is important to have a balance between what is desirable and what is achievable; helping people with due diligence is vital in high-risk/high-reward projects.\n\n## Technical debt and legacy\n\nTechnical debt is a concept that is often misunderstood, and which can lead to significant problems if not managed properly. It is not just about code, but about the processes, the tools, the documentation, and the people. It is about decisions that were made in the past, and the consequences of those decisions. Teams that have been fighting technical debt for a long time will ultimately become very adept at fighting fires, but will find it very hard to innovate and move forward. This leads to an environment where the team is constantly playing catch-up, and where the focus is on fixing problems rather than on delivering value.\n\nIn the past I have worked with teams who were absolutely convinced that they were highly effective - indeed the team was delivering \"things\" and meeting deadlines. However they were doing little else but fix bugs, delivering incremental features that were not needed and which were not used, building only what was possible rather than what was needed. The footprint of the product wasn't evolving, and staleness had crept in a long time ago. Legacy can and will kill a product in many ways, not necessarily by the code itself, but by the lack of innovation and the lack of willingness to change.\n\n## Scaling laws\n\nThere are a few scaling principles that anyone working in technology should be able to grasp. The first is *[:link Conway's law](https://en.wikipedia.org/wiki/Conway%27s_law)*, which states that \"organizations which design systems (...) are constrained to produce designs which are copies of the communication structures of these organizations.” In practice, a system’s architecture tends to mirror the org chart and communication paths of its creators​. A misaligned software architecture and team structure can lead to inefficiencies or unintended design complexity.\n\nYou have probably seen this in practice, where a monolithic codebase becomes unwieldy as the team grows, or distributed teams struggle with tightly coupled microservices. For instance, a startup’s early system, built by a single cohesive team, often evolves into a tangled mess of dependencies once the company scales into departmental silos (engineering, product, DevOps). Suddenly, the software reflects fragmented priorities and communication gaps, with teams duplicating efforts or bypassing critical integrations. Many businesses now even use the inverse Conway maneuver - reorganizing teams to achieve a desired software architecture​.\n\nAnother important principle is Brooks' Law - “Adding manpower to a late software project makes it later.” Fred Brooks' classic lesson warns that simply throwing more developers at a slipping project often backfires​. New team members take time to ramp up and increase communication overhead, which can further slow progress. This law has been validated “project after project across engineering teams of all sizes”​, reminding us to be cautious about scaling headcount as a solution, as it leads to diminishing returns due to increased coordination costs.\n\n::: {#4a514691 .cell execution_count=3}\n``` {.python .cell-code}\nimport math\nimport matplotlib.pyplot as plt\n\n# Define range for n values\nn_values = list(range(3, 12))\nnum_plots = len(n_values)\ncols = 3\nrows = (num_plots + cols - 1) // cols  # Ceiling division for rows\n\n# Create subplots\nfig, axes = plt.subplots(rows, cols, figsize=(cols*2, rows*3))\naxes = axes.flatten()  # Make it easier to iterate\n\nfor ax, n in zip(axes, n_values):\n    ax.set_title(f\"{n} people, {n*(n-1)//2} lines\")\n    \n    # Set equal aspect and limits\n    ax.set_aspect('equal')\n    ax.set_xlim(-1.2, 1.2)\n    ax.set_ylim(-1.2, 1.2)\n    \n    # Hide axes\n    ax.axis('off')\n    \n    # Compute circular coordinates\n    coords = [(math.cos(2*math.pi*i/n), math.sin(2*math.pi*i/n)) for i in range(n)]\n    \n    # Draw all connecting lines\n    for i in range(n):\n        for j in range(i+1, n):\n            x_coords = [coords[i][0], coords[j][0]]\n            y_coords = [coords[i][1], coords[j][1]]\n            ax.plot(x_coords, y_coords, linewidth=1, color='green')\n    \n    # Draw vertices\n    xs, ys = zip(*coords)\n    ax.scatter(xs, ys, s=20, color=\"darkgreen\")\n\n# Hide any unused subplots\nfor ax in axes[num_plots:]:\n    ax.axis('off')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\nFinally, Dunbar's number, where anthropologist Robin Dunbar found that humans maintain stable social relationships in groups up to about 150​. In small teams (under approximately 10 people), everyone communicates frequently and informally, but beyond certain sizes, additional structure and process are needed​. Teams exceeding roughly 100–150 people often lose cohesion, requiring formal interfaces and roadmaps to coordinate​. Effective scaling often involves breaking organizations into smaller units to stay within these cognitive limits. Dunbar's number is probably *much smaller* in complex environments. I am sure many of us have found that teams of five or seven people can easily become unmanageable without the right conditions in place.\n\n## Pizza teams\n\nA common way to think about team size is the [\"two pizza rule\"](https://docs.aws.amazon.com/whitepapers/latest/public-sector-cloud-transformation/two-pizza-teams-from-ops-to-devops.html) - if it can't be fed with two pizzas, it is too large. The pizza rule emerged in Amazon, Jeff Bezzos famously said that he wanted to keep teams small enough that they could be fed with two pizzas. The idea is that smaller teams are more efficient, more agile, and more effective. They can communicate more easily, make decisions more quickly, and are more likely to be cohesive.\n\nThis isn't always true, but there is wisdom in the rule. Smaller groups in a sense *force* communication, as there are fewer people to talk to, fewer people to make decisions, and lead to easier consensus. Smaller teams can also lead to a more resilient, distributed architecture, as they are less likely to build monolithic systems that are hard to change.\n\n## Small and incremental, but keep an eye on the target picture\n\nWhenever a team, or a group of teams is working on an innovation initiative, there is a tendency to want to start fresh and build something completely new. More often than not this leads to failure, as the team is not able to deliver on the promise, resulting in the project being cancelled or the team disbanded. It is vital to start small, build incrementally on what is there already, but to keep an eye on the target picture and to make steady, continuous progress towards it. This is where good product management comes in, as they are able to keep the team focused on the goal, and to help them make the right decisions along the way. As any initiative moves forward, product management becomes the linchpin that transforms early, incremental successes into a coherent long-term vision. They serve as the bridge between engineering, design and the market, ensuring that incremental progress aligns broadly.\n\nFor this approach to work, it is imperative that engineering teams and product managers have aligned incentives and goals, and that they are working towards the same outcomes. Engineering typically think of the product as a set of *features*, while product think in terms of delivered *value*. The two are not the same, and teams often need help working towards the same goals.\n\nThey also need support to test out ideas, to [:link fail fast](https://en.wikipedia.org/wiki/Fail_fast_(business)), and to learn from their mistakes. It is hard to determine what is valuable and what is not, and it is important to have a process in place which supports rapid discovery, experimentation, prototyping and validation of new ideas. This is where the concept of [:lean startup](https://en.wikipedia.org/wiki/Lean_startup) comes in, and where the team needs to be able to pivot quickly, to change direction, and to adapt to new information. It is also important that product managers buy into this approach, and that they are able to support the team in their efforts.\n\n## A model for team productivity\n\nIt is always useful to visually intuit how some of the factors we discussed interact with each other and impact the ability of an engineering team to deliver. Let us quickly model how team integration, communication, and technical debt can affect team productivity as project size increases. The following widget allows you to adjust the sliders for team integration, communication, and technical debt, and see how the productivity curve changes. Each slider represents the amount of friction introduced by the corresponding factor, i.e., as you move the sliders to the right you are saying that the team has more friction due to that factor. The productivity curve is based on a simple model that combines these factors to estimate the team's mid productivity level, as well as the uncertainty range around it.\n\nYou can estimate where the team is in regards to these factors, and put each slide at the right level to estimate where they are in the productivity curve. \"Productivity\" in this case means the amount of time the team spends delivering value, rather than spending time just fixing things, trying to understand what is needed, just talking to each other, or attempting to integrate various aspects of what they developed (a productivity of zero means the team is basically not delivering anything, while a value of one means they are delivering at full capacity).\n\nThe model is very simplified, but should give you a good intuition on how these factors interact.\n\n::: {#c8fb81ca .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nfrom bokeh.plotting import figure, output_file, save\nfrom bokeh.models import ColumnDataSource, Slider, CustomJS, Band\nfrom bokeh.layouts import column\n\n# Decay factor for technical debt\nk = 1.0\n\n# Function to compute mid productivity based on project size and factors.\ndef compute_mid_productivity(sizes, team_integration, communication, technical_debt):\n    # Base factor: higher integration & communication reduce friction.\n    # Technical debt now decays productivity exponentially.\n    base = (1 - 0.5 * (team_integration + communication)) * np.exp(-k * technical_debt)\n    # Exponential decay with increasing project size.\n    return base * np.exp(-0.03 * (sizes - 1))\n\n# Baseline uncertainty fraction at maximum project size\nbaseline_uncertainty = 1.0\n\n# Initial parameter values\ninitial_team_integration = 0.2\ninitial_communication = 0.2\ninitial_technical_debt = 0.2\n\n# Create an array for project sizes\nsizes = np.linspace(1, 100, 100)\nmax_size = sizes[-1]\n\n# Calculate the mid productivity curve.\nmid_productivity = compute_mid_productivity(sizes, initial_team_integration, initial_communication, initial_technical_debt)\n# Compute effective uncertainty: baseline uncertainty scaled by the average friction factor.\neffective_uncertainty = baseline_uncertainty * ((initial_team_integration + initial_communication + initial_technical_debt) / 3)\n# Scale uncertainty: linear from 0 at size=1 to effective_uncertainty at max_size.\nscale = (sizes - 1) / (max_size - 1)\nlower_productivity = mid_productivity * (1 - effective_uncertainty * scale)\nupper_productivity = mid_productivity * (1 + effective_uncertainty * scale)\n\n# Set up the Bokeh data source.\nsource = ColumnDataSource(data=dict(\n    x=sizes,\n    y_mid=mid_productivity,\n    y_lower=lower_productivity,\n    y_upper=upper_productivity\n))\n\n# Create the Bokeh figure.\np = figure(title=\"Team Productivity vs. Project Size\",\n           x_axis_label=\"Project Size\",\n           y_axis_label=\"Productivity\",\n           width=600, height=400)\np.line('x', 'y_mid', source=source, line_width=2, color=\"green\", legend_label=\"Mid Productivity\")\n\n# Add a band between lower and upper curves.\nband = Band(base='x', lower='y_lower', upper='y_upper', source=source,\n            level='underlay', fill_alpha=0.2, line_width=1, line_color='gray', fill_color='green')\np.add_layout(band)\np.legend.location = \"top_right\"\n\n# Create sliders for team integration, communication, and technical debt.\nslider_team = Slider(start=0, end=1, value=initial_team_integration, step=0.01, title=\"Team Integration\", show_value=False, tooltips=False)\nslider_comm = Slider(start=0, end=1, value=initial_communication, step=0.01, title=\"Communication\", show_value=False, tooltips=False)\nslider_td = Slider(start=0, end=1, value=initial_technical_debt, step=0.01, title=\"Technical Debt\", show_value=False, tooltips=False)\n\n# Define a JavaScript callback to update the productivity curves when slider values change.\ncallback = CustomJS(args=dict(source=source,\n                              slider_team=slider_team,\n                              slider_comm=slider_comm,\n                              slider_td=slider_td,\n                              baseline_uncertainty=baseline_uncertainty,\n                              max_size=max_size,\n                              k=k),\n                    code=\"\"\"\n    const data = source.data;\n    const x = data['x'];\n    const y_mid = data['y_mid'];\n    const y_lower = data['y_lower'];\n    const y_upper = data['y_upper'];\n    \n    const team = slider_team.value;\n    const comm = slider_comm.value;\n    const td = slider_td.value;\n    \n    // Compute the base factor with exponential decay for technical debt.\n    const baseFactor = (1 - 0.5 * (team + comm)) * Math.exp(-k * td);\n    \n    // Effective uncertainty scales with the average of the friction factors.\n    const effective_uncertainty = baseline_uncertainty * ((team + comm + td) / 3);\n    \n    // Update productivity curves.\n    for (let i = 0; i < x.length; i++) {\n        y_mid[i] = baseFactor * Math.exp(-0.03 * (x[i] - 1));\n        let scale = (x[i] - 1) / (max_size - 1);\n        y_lower[i] = y_mid[i] * (1 - effective_uncertainty * scale);\n        y_upper[i] = y_mid[i] * (1 + effective_uncertainty * scale);\n    }\n    source.change.emit();\n\"\"\")\n\n# Attach the callback to slider value changes.\nslider_team.js_on_change('value', callback)\nslider_comm.js_on_change('value', callback)\nslider_td.js_on_change('value', callback)\n\n# Arrange the plot and sliders in a layout.\nlayout = column(p, slider_team, slider_comm, slider_td)\n\n# Save the interactive plot as an HTML file.\noutput_file(\"team_productivity.html\")\n_ = save(layout)\n```\n:::\n\n\n<iframe src=\"team_productivity.html\" width=\"100%\" height=\"540px\" style=\"border:none;\"></iframe>\n\n## Moving forward\n\nTo conclude what is now a long list of ideas and learnings, what absolutely matters is that teams are supported in *moving forward* and in *delivering value*. This is not about adding more people, or about finding a hero to save the day, but about helping the team work better together, making the right decisions along the way. It is about reducing friction, and helping everyone to communicate more effectively, to integrate better, and work towards a common goal.\n\nIt is also about [:link decentralising decision making](https://en.wikipedia.org/wiki/Decentralized_decision-making) rather than making it entirely top-down, and empowering the team to make the right decisions themselves. Ultimately consensus should be an emergent property, arising from giving the team the right information, the right tools, and the right incentives to make their way forward while fostering autonomy and accountability. It is about helping everyone to learn from their mistakes, to pivot quickly, and to adapt to new information. It is about helping the team to experiment, to prototype, and to validate new ideas. Helping them to fail fast, and to learn from their failures as well as their successes. All this I believe is essential for fostering a culture of innovation and continuous improvement.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}