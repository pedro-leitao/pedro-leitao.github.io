{
  "hash": "46846289bce7c0390481be409c4dcb12",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Maps and More Maps\nsubtitle: \"sometimes a map and a few lines of code are all you need\"\ndate: 2025-03-10\ncategories:\n  - Experiments\n  - Software Engineering\ntags:\n  - Experiments\n  - Software Engineering\n  - Programming\njupyter: python3\n---\n\n\nRecently I was trying to figure out sun exposure for a specific location, except I am a couple of thousand kilometers away, and I needed to get a sense of the sun's path. There are quite a few tools available online (like [SunCalc](https://suncalc.org)), and some mobile apps which pretty much do the job. But, I really wanted to find out if I could do it myself from first principles.\n\nThe problem here is that although I vaguely remember the area, I don't have a clear picture of the surroundings. So, an overlay on a map of the sun's path at different times of the day and year would be really helpful and give an intuition of the kind of sun exposure the area gets.\n\nTo solve this we would need a few steps - we need map the area, and for that we have Python's [`folium`](https://github.com/python-visualization/folium) library which is a wrapper around `leaflet.js`. We also need to calculate the sun's position at different times of the day and year, and for that we have the [`pysolar`](https://pysolar.readthedocs.io/en/latest/) library. Finally we need to figure out how to overlay the sun's path on the map, and for that we need to do some basic geometry.\n\nLet us start by visualising the area on a map. I know the coordinates of the area of interest, which we can use to create a simple polygon on a map.\n\n::: {#adf69ea5 .cell execution_count=2}\n``` {.python .cell-code}\nimport folium\n\nlon = -8.649779901717114\nlat = 41.14898866596278\nbase = (lat, lon)\n\nshape = [\n    [41.14897506901333, -8.649853359565837],\n    [41.14893442240481, -8.6497568000413],\n    [41.14898264291275, -8.64971958439122],\n    [41.1489942562235, -8.649717237458331],\n    [41.14908867741279, -8.64980273287068],\n    [41.149035155258005, -8.649911027059657],\n    [41.14897506901333, -8.649853359565837]\n]\n\n\n# Set the zoom level\nzoom_start = 19\n\n# Create the map\nmap_osm = folium.Map(location=base, zoom_start=zoom_start)\n\n# Add a polygon to the map\nfolium.Polygon(\n    shape,\n    color='blue',\n    fill=True,\n    weight=1,\n    fill_color='blue',\n    fill_opacity=0.2).add_to(map_osm)\n\n# Save the map to an HTML file\nmap_osm.save('osm_map.html')\n```\n:::\n\n\n<iframe src=\"osm_map.html\" width=\"100%\" height=\"450\"></iframe>\n\nNow that we have the area mapped, we can start adding the sun's path at different times of the day. Let us create a function that will add lines to the map indicating the position and altitude of the sun at different times of the day. We need to calculate the *azimuth* and *altitude* of the sun at a given location and time, and then draw a line from the base to the calculated position. `pysolar` does this job tremendously well for us - we can give the function a specific date, and it will then calculate the sun's position at different times of the day and draw lines on the map. The lines will have distinct lengths depending on the sun's altitude (the shorter, the higher the sun), which should give us a sense of how strongly the sun shines on different parts of the area at different times of the day.\n\n::: {#8967f36e .cell execution_count=3}\n``` {.python .cell-code}\nfrom pysolar.solar import get_azimuth, get_altitude\nfrom geopy.distance import distance\nfrom folium.features import DivIcon\nimport folium\nimport datetime\n\ndef add_sun_lines(map_obj, month, day, line_color, line_weight, label_pos_end=False, line_style=\"solid\"):\n    # Define the hours (7am to 7pm, every 2 hours)\n    hours = [7, 9, 11, 13, 15, 17, 19]\n    year = 2025\n    base_distance = 50  # maximum distance when sun is at horizon\n\n    for hour in hours:\n        # Create a UTC datetime for the given hour\n        dt = datetime.datetime(year, month, day, hour, 0, 0, tzinfo=datetime.timezone.utc)\n\n        # Compute the sun's azimuth and altitude at your location\n        azimuth = get_azimuth(lat, lon, dt)\n        altitude = get_altitude(lat, lon, dt)\n\n        # Ensure altitude is non-negative for the calculation\n        altitude_for_calc = max(0, altitude)\n\n        # The higher the sun, the shorter the line\n        effective_distance = base_distance * (1 - altitude_for_calc / 90)\n\n        # Calculate a destination point using the effective distance\n        dest = distance(meters=effective_distance).destination(point=base, bearing=azimuth)\n        \n        # Setup polyline options based on line_style\n        polyline_options = {}\n        if line_style.lower() == \"dashed\":\n            polyline_options[\"dash_array\"] = \"5, 5\"\n        \n        # Draw the line (polyline) from the base to the destination\n        folium.PolyLine(\n            locations=[[lat, lon], [dest.latitude, dest.longitude]],\n            color=line_color,\n            weight=line_weight,\n            popup=f\"{dt.strftime('%b %d, %H:%M')} - Azimuth: {azimuth:.1f}°, Altitude: {altitude:.1f}°\",\n            **polyline_options\n        ).add_to(map_obj)\n        \n        pos_lat = dest.latitude if label_pos_end else (lat + dest.latitude) / 2\n        pos_lon = dest.longitude if label_pos_end else (lon + dest.longitude) / 2\n        \n        # Add a label and star icon only for specific hours (7, 13, 19)\n        if hour in (7, 13, 19):\n            # Add time label marker\n            folium.Marker(\n                [pos_lat, pos_lon],\n                icon=DivIcon(\n                    html=f'<div style=\"font-size: 11pt; color: black;\">{hour}:00</div>'\n                )\n            ).add_to(map_obj)\n            # Add a star icon (UTF star character) at the destination, shifted with CSS\n            folium.Marker(\n                [dest.latitude, dest.longitude],\n                icon=DivIcon(\n                    html='<div style=\"font-size: 14pt; color: orange; transform: translate(10px, -10px);\">★</div>'\n                )\n            ).add_to(map_obj)\n```\n:::\n\n\nWith that, let us add the sun lines to the map for August 1 (summer) and January 1 (winter). We will use red lines for August 1 and blue lines for January 1.\n\n::: {#3153f306 .cell execution_count=4}\n``` {.python .cell-code}\n# Add sun lines for August 1 (bold red lines) and January 1 (thin blue lines)\nadd_sun_lines(map_osm, month=8, day=1, line_color='red', line_weight=3, label_pos_end=True)\nadd_sun_lines(map_osm, month=1, day=1, line_color='blue', line_weight=2, label_pos_end=True, line_style=\"dashed\")\n```\n:::\n\n\n`folium` relies on `leaflet.js` which produces Javascript for rendering maps, so we need to save the map to an HTML file to view it.\n\n::: {#c15ac479 .cell execution_count=5}\n``` {.python .cell-code}\n# Save the map to an HTML file\nmap_osm.save('osm_map_with_sun_markers.html')\n```\n:::\n\n\n<iframe src=\"osm_map_with_sun_markers.html\" width=\"100%\" height=\"450\"></iframe>\n\nThat worked very well! We want a map which gives the best visual sense of the area and the sun's path, so let us add a tile layer to the map. We can use the `CartoDB Positron` tile layer, which is a light, minimalistic map style.\n\n::: {#508d9efb .cell execution_count=6}\n``` {.python .cell-code}\n# Add a tile layer to the map\nfolium.TileLayer('CartoDB Positron', opacity=1.0).add_to(map_osm)\n\nmap_osm.save('osm_map_with_sun_markers_and_tiles.html')\n```\n:::\n\n\n<iframe src=\"osm_map_with_sun_markers_and_tiles.html\" width=\"100%\" height=\"450\"></iframe>\n\nIt would also be interesting to see the sun's path throughout the day as an arc. We can add a continuous line to the map that represents the sun's path from sunrise to sunset. Let us create another function which will compute the sun's position more frequently and draw a continuous line on the map.\n\n::: {#063e58aa .cell execution_count=7}\n``` {.python .cell-code}\ndef add_sun_path(map_obj, month, day, line_color='orange', line_weight=2, interval=15):\n    year = 2025\n    base_distance = 50\n    sun_path_coords = []\n    \n    # Compute sun positions every `interval` minutes between 7:00 and 19:00 UTC\n    for t in range(7 * 60, 19 * 60, interval):\n        hour = t // 60\n        minute = t % 60\n        dt = datetime.datetime(year, month, day, hour, minute, 0, tzinfo=datetime.timezone.utc)\n        azimuth = get_azimuth(lat, lon, dt)\n        altitude = get_altitude(lat, lon, dt)\n        # Ensure a non-negative altitude for the calculation\n        altitude_for_calc = max(0, altitude)\n        # Scale the distance: the higher the sun, the shorter the line\n        effective_distance = base_distance * (1 - altitude_for_calc / 90)\n        dest = distance(meters=effective_distance).destination(point=base, bearing=azimuth)\n        sun_path_coords.append([dest.latitude, dest.longitude])\n    \n    # Draw the continuous sun path\n    folium.PolyLine(\n         locations=sun_path_coords,\n         color=line_color,\n         weight=line_weight,\n         opacity=0.7,\n         popup=\"Sun Path\"\n    ).add_to(map_obj)\n```\n:::\n\n\nThis allows us to add the sun path for August 1 and January 1, with different line colors and weights.\n\n::: {#f39085f8 .cell execution_count=8}\n``` {.python .cell-code}\n# Add sun path for August 1\nadd_sun_path(map_osm, month=8, day=1, line_color='darkorange', line_weight=2)\nadd_sun_path(map_osm, month=1, day=1, line_color='orange', line_weight=1)\n\nmap_osm.save('osm_map_with_sun_markers_tiles_and_path.html')\n```\n:::\n\n\n<iframe src=\"osm_map_with_sun_markers_tiles_and_path.html\" width=\"100%\" height=\"450\"></iframe>\n\nThat works very well, but we are lacking a sense of depth - we can add a satellite layer to the map to give a better sense of the area, the geometry, and potential obstacles which could occlude the sun's path.\n\n::: {#a3952155 .cell execution_count=9}\n``` {.python .cell-code}\n# Add an ESRI Satellite layer to the map\nfolium.TileLayer(\n        tiles = \"StadiaAlidadeSatellite\",\n        opacity = 1.0\n).add_to(map_osm)\n\nmap_osm.save('osm_map_with_sun_markers_tiles_path_and_satellite.html')\n```\n:::\n\n\n<iframe src=\"osm_map_with_sun_markers_tiles_path_and_satellite.html\" width=\"100%\" height=\"450\"></iframe>\n\nAlthough not perfect, it gives a really good sense of the area and the sun's path, any potential shaded zones, and the kind of sun exposure it will get. It's a testament as to what a few lines of code can do!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}